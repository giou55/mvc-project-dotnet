Extension methods are a convenient way of adding methods to classes that you cannot modify directly,
typically because they are provided by Microsoft or a third-party package. 

namespace MyProject.Models {
	public class ShoppingCart {
		public IEnumerable<Product?>? Products { get; set; }
	}
}

----------------------------------------------------------------------------------------------

Suppose I need to be able to determine the total value of the Product objects in the ShoppingCart 
class, but I cannot modify the class because it comes from a third party, and I do not have the 
source code. I can use an extension method to add the functionality I need.

namespace MyProject.Models {
	public static class MyExtensionMethods {
		public static decimal TotalPrices(this ShoppingCart cartParam) {
			decimal total = 0;
			if (cartParam.Products != null) {
				foreach (Product? prod in cartParam.Products) {
					total += prod?.Price ?? 0;
				}
			}
			return total;
		}
	}
}

--------------------------------------------------------------------------------------------

Extension methods are defined in static classes within the same namespace as the class to which 
the extension methods applies. Extension methods are also static.

The this keyword in front of the first parameter marks TotalPrices as an extension method.
The first parameter tells .NET which class the extension method can be applied to — ShoppingCart 
in this case. I can refer to the instance of the ShoppingCart that the extension method has 
been applied to by using the cartParam parameter.

-------------------------------------------------------------------------------------------

Applying an extension method:

ShoppingCart cart = new ShoppingCart { Products = Product.GetProducts()};
decimal cartTotal = cart.TotalPrices();
Console.WriteLine($"Total: {cartTotal:C2}"); // Total: $323.95

I call the TotalPrices method on a ShoppingCart object as though it were part of the ShoppingCart
class, even though it is an extension method defined by a different class altogether. 
.NET will find extension classes if they are in the scope of the current class, meaning that 
they are part of the same namespace or in a namespace that is the subject of a using statement.

----------------------------------------------------------------------------------------------

Extension methods can also be applied to an interface, which allows me to call the extension 
method on all the classes that implement the interface.

Extension methods can also be used to filter collections of objects.
