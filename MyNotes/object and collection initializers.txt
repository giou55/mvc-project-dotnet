object[] data = new object[] { 
	275M, 29.95M, "apple", "orange", 100, 10 
};

--------------------------------------------------------------------------

2 ways to initialize a string array: 

string[] names = new string[3];
names[0] = "Bob";
names[1] = "Joe";
names[2] = "Alice";

string[] names = new string[] { "Bob", "Joe", "Alice" };

--------------------------------------------------------------------------

2 ways to create an object and specify its property values:

Product kayak = new Product {
	Name = "Kayak", Price = 275M
};

Product kayak = new Product();
kayak.Name = "Kayak";
kayak.Price = 275M;

-----------------------------------------------------------------------

Using the traditional C# approach to initializing a dictionary that use indexes:

Dictionary<string, Product> products = new Dictionary<string, Product> {
	{ "Kayak", new Product { Name = "Kayak", Price = 275M } },
	{ "Lifejacket", new Product{ Name = "Lifejacket", Price = 48.95M } }
};

The latest versions of C# support a more natural approach to initializing indexed 
collections such as dictionaries that is consistent with the way that values are 
retrieved or modified once the collection has been initialized:

Dictionary<string, Product> products = new Dictionary<string, Product> {
	["Kayak"] = new Product { Name = "Kayak", Price = 275M },
	["Lifejacket"] = new Product { Name = "Lifejacket", Price = 48.95M }
};

The effect is the same — to create a dictionary whose keys are Kayak and Lifejacket 
and whose values are Product objects.

Initializing a dictionary can be more simplified using a target-typed new expression:

Dictionary<string, Product> products = new() {
	["Kayak"] = new Product { Name = "Kayak", Price = 275M },
	["Lifejacket"] = new Product { Name = "Lifejacket", Price = 48.95M }
};

Creating instances with the new() expression works only when the compiler can 
determine which type is required. 

----------------------------------------------------------------------------

