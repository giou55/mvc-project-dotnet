ICollection
ICollection inherits from IEnumerable. 
There is one difference:
You can find IEnumerable[ i ] --> Index Based
You can NOT find ICollection[ i ] --> Not Index Based

----------------------------------------------------------------------------------------------------

IList
Implemented by List

------------------------------------------------------------------------------------------------------

IEnumerable
IEnumerable is suitable just for iterating through collection and you cannot modify (Add or Remove) data.
IEnumerable is read-only and List is not.
Contains GetEnumerator method.
You can instantiate IEnumerable from List:
IEnumerable<employee> queryIEnumerable = new List<employee>() ;

------------------------------------------------------------------------------------------------------

IQueryable
The IQueryable<T> interface is useful because it allows a collection of objects to be queried
efficiently. 
Using the IQueryable<T> interface allows me to ask the database for just the objects
that I require using standard LINQ statements and without needing to know what database server stores
the data or how it processes the query. 
Without the IQueryable<T> interface, I would have to retrieve all of the Product objects from the 
database and then discard the ones that I don’t want, whichbecomes an expensive operation as the 
amount of data used by an application increases. 
It is for this reason that the IQueryable<T> interface is typically used instead of IEnumerable<T> 
in database repository interfaces and classes.
A difference between IQueryable and IEnumerable is that you can not instantiate IQueryable from List

-----------------------------------------------------------------------------------------------------

Array
Generic collection, inherits from IEnumerable
Array is fixed length. Size can’t be increase or decrease dynamically.
Array is strongly typed.
Developers use "foreach" keyword to fill and iterate through array.
Fixed Length and Strongly Typed consume less memory, therefore it has good performance.
Array cannot accept null.

string[] strArray = new string[10];

Product[] productArray = {
	new Product {Name = "Kayak", Price = 275M},
	new Product {Name = "Lifejacket", Price = 48.95M}
};

-----------------------------------------------------------------------------------------------------

List
Generic collection 
Implements ICollection<T>, IEnumerable<T>, IList<T>, IReadOnlyCollection<T>
list is not fixed length. Size can be increase or decrease dynamically. 
List is strongly typed.
Developers use "foreach" keyword to fill and iterate through array.
List implements IEnumerable, but represents the entire collection in memory.

public List<PizzaModel> Pizzas = new List<PizzaModel>();
public List<CartLine> Lines { get; set; } = new List<CartLine>();
List<int> ints = new List<int> { 3, 56, 78, 21, 34, 98, 45, 22 };

-----------------------------------------------------------------------------------------------------


ArrayList
Non generic collection, inherits from IEnumerable
Arraylist is not fixed length. Size can be increase or decrease dynamically. 
ArrayList is not strongly typed.
Developers use "foreach" keyword to fill and iterate through arraylist.
Insertion and deletion operation in ArrayList is slower than an Array.
ArrayList is not guaranteed to be sorted.
ArrayList can accepts null.

ArrayList strArrayList = new ArrayList();
strArrayList.Add("Maria");
strArrayList.Add(1); 
strArrayList.Add(0.89);

-----------------------------------------------------------------------------------------------------

Dictionary
Generic collection


HashTable
Non generic collection
HashTable is another kind of data structure that defines key value for each data section. 
Therefore finding data is easy just by pointing out to its key. 
It is NOT strongly typed and NOT fixed size.


Stack
Queue - generic collection


Lists, Queues and Arrays are all implementing IEnumerable interface.
They are generic collections and we can use a foreach loop.

-----------------------------------------------------------------------------------------------


var names = new[] { "Kayak", "Lifejacket", "Soccer ball" };

--------------------------------------------------------------------------------------------------

ANONYMOUS TYPE:
var products = new[] {
	new { Name = "Kayak", Price = 275M },
	new { Name = "Lifejacket", Price = 48.95M },
	new { Name = "Soccer ball", Price = 19.50M },
	new { Name = "Corner flag", Price = 34.95M }
};