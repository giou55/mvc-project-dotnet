A view is an HTML template with embedded Razor markup. 
Usually, view files are grouped into folders named for each of the app's controllers. 
The Home controller is represented by a Home folder inside the Views folder.
The Home folder contains the views for the About, Contact, and Index (homepage) webpages.

Layouts provide consistent webpage sections and reduce code repetition.
Partial views reduce code duplication by managing reusable parts of views.
View components are similar to partial views in that they allow you to reduce 
repetitive code, but they're appropriate for view content that requires code to 
run on the server in order to render the webpage.

Views are typically returned from actions as a ViewResult, which is a type of ActionResult.
Since most controllers inherit from Controller, you simply use the View helper method to 
return the ViewResult.

The View helper method has several overloads.
An explicit view to return:        return View("Orders");
A model to pass to the view:       return View(Orders);
Both a view and a model:           return View("Orders", Orders);
A view with the same name 
as the action method from 
which it's called:                 return View();
A view file path can be provided 
instead of a view name:            return View("Views/Home/About.cshtml");

----------------------------------------------------------------------------------------
Approaches to pass data to views:
viewmodel
ViewData 
[ViewData] attribute in controller
ViewBag

@{
    ViewData["Title"] = "About";
}
@model WebApplication1.ViewModels.Address
@model BookViewModel

<h2>@ViewData["Title"].</h2>
<h2>Contact</h2>
<address>
    @Model.Street<br>
    @Model.City, @Model.State @Model.PostalCode<br>
    <abbr title="Phone">P:</abbr> 425.555.0100
</address>

-----------------------------------------------------------------------------------------

@using SportsStore.Models
@using System.Globalization
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

@if ()
{
} else { 
}

@foreach (string category in Model)
{
    <p>@category</p>
}

------------------------------------------------------------------------------------------

Implicit Razor expressions start with @ followed by C# code:

<p>@DateTime.Now</p>

With the exception of the C# await keyword, implicit expressions must not contain spaces:

<p>@await DoSomething("hello", "world")</p>

-------------------------------------------------------------------------------------------

Explicit Razor expressions consist of an @ symbol with balanced parenthesis:

<p>Last week this time: @(DateTime.Now - TimeSpan.FromDays(7))</p>

Explicit expressions can be used to concatenate text with an expression result:

@{
    var joe = new Person("Joe", 33);
}

<p>Age@(joe.Age)</p>

--------------------------------------------------------------------------------------------

Configuration injection

The values in settings files, such as appsettings.json 
and appsettings.Development.json, can be injected into a view.

@inject IConfiguration Configuration

<h2>
   MyName: @Configuration["MyName"]
</h2>

------------------------------------------------------------------------------------------

Service injection

@inject StatisticsService StatsService

<ul>
    <li>Total Items: @StatsService.GetCount()</li>
    <li>Completed: @StatsService.GetCompletedCount()</li>
    <li>Avg. Priority: @StatsService.GetAveragePriority()</li>
</ul>

The service should be registered for dependency injection in ConfigureServices in Program.cs

------------------------------------------------------------------------------------------

View injection can be useful to populate options in UI elements, such as dropdown lists.

@inject ProfileOptionsService Options


<div>
    Favorite Color: @Html.DropDownList("FavColor",
        Options.ListColors().Select(c => 
            new SelectListItem() { Text = c, Value = c }))
</div>


public class ProfileOptionsService
{
    public List<string> ListColors()
    {
        return new List<string>() { "Blue","Green","Red","Yellow" };
    }
}

-------------------------------------------------------------------------------------------