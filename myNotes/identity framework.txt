Installing the package that contains the ASP.NET Core Identity support 
for Entity Framework Core:

dotnet add package Microsoft.AspNetCore.Identity.EntityFrameworkCore --version 6.0.0

------------------------------------------------------------------------------------------

Users are managed through the UserManager<T> class, 
where T is the class chosen to represent users in the database. 
Use the RoleManager<T> class to manage the roles.

IdentityUser is the class to represent users in the database. 
This is the built-in class that is provided by ASP.NET Core Identity, 
and it provides the core features that are required by most applications. 

IdentityRole is the built-in class that Identity provides to describe a role.

----------------------------------------------------------------------------------------

Useful IdentityUser properties:

Id       (contains the unique ID for the user)
UserName (returns the user’s username)
Email    (contains the user’s e-mail address)

----------------------------------------------------------------------------------------

Useful UserManager<T> Members:

Users                       This property returns a sequence containing the users stored in the database.
FindByIdAsync(id)           This method queries the database for the user object with the specified ID.
CreateAsync(user,password)  This method stores a new user in the database using the specified password.
UpdateAsync(user)           This method modifies an existing user in the database.
DeleteAsync(user)           This method removes the specified user from the database.

-----------------------------------------------------------------------------------------

Useful RoleManager<T> Members:

CreateAsync(role)      Creates a new role
DeleteAsync(role)      Deletes the specified role
FindByIdAsync(id)      Finds a role by its ID
FindByNameAsync(name)  Finds a role by its name
RoleExistsAsync(name)  Returns true if a role with the specified name exists
UpdateAsync(role)      Stores changes to the specified role
Roles                  Returns an enumeration of the roles that have been defined

--------------------------------------------------------------------------------------------

Useful IdentityRole Properties:

Id		This property contains the unique ID for the role.
Name	This property returns the role name.

---------------------------------------------------------------------------------------------

Although roles are managed through the RoleManager<T> class, membership of roles is managed
through the methods provided by UserManager<T>:

AddToRoleAsync(user, role)		  This method adds a user to a role.
RemoveFromRoleAsync(user, role)	  This method removes a user from a role.
GetRolesAsync(user)				  This method returns the roles for which the user is a member.
GetUsersInRoleAsync(role)		  This method returns users who are members of the specified role.
IsInRoleAsync(user, role)		  This method returns true if the user is a member of the specified role

---------------------------------------------------------------------------------------------

Use the SignInManager<T> class to validate the credentials users
provide and use the built-in middleware to trigger authentication.

Useful SigninManager<T> Members:

PasswordSignInAsync(name, password, persist, lockout)
This method attempts authentication using the specified username
and password. The persist argument determines whether a
successful authentication produces a cookie that persists after the
browser is closed. The lockout argument determines whether the
account should be locked if authentication fails.

SignOutAsync() 
This method signs out the user.

--------------------------------------------------------------------------------------------

ASP.NET Identity requires a database, which is managed through Entity Framework Core:

using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;

namespace Advanced.Models {
	public class IdentityContext: IdentityDbContext<IdentityUser> {
		public IdentityContext(DbContextOptions<IdentityContext> options)
			: base(options) { }
	}
}

The ASP.NET Core Identity package includes the IdentityDbContext<T> class, which is used to create
an Entity Framework Core context class. The generic type argument T is used to specify the class 
that will represent users in the database. You can create custom user classes, but I have used 
the basic class, called IdentityUser

----------------------------------------------------------------------------------------

A connection string to the appsettings.json file is required to tell ASP.NET Core Identity 
where it should store its data. 

-------------------------------------------------------------------------------------------

Configuring Identity in the Program.cs file:

using Microsoft.AspNetCore.Identity;

builder.Services.AddDbContext<IdentityContext>(opts =>
	opts.UseSqlServer(builder.Configuration[
		"ConnectionStrings:IdentityConnection"]));

//configure application so the Identity database context is set up as a service
builder.Services.AddIdentity<IdentityUser, IdentityRole>()
	.AddEntityFrameworkStores<IdentityContext>();

--------------------------------------------------------------------------------------------

The remaining step is to create the Entity Framework Core database migration and 
apply it to create the database:

dotnet ef migrations add --context IdentityContext Initial
dotnet ef database update --context IdentityContext

--------------------------------------------------------------------------------------------

ASP.NET Core Identity provides a middleware component that detects the cookie created by the
SignInManager<T> class and populates the HttpContex object with details of the authenticated user.

Enabling middleware in the Program.cs file:

using Microsoft.AspNetCore.Identity;

app.UseAuthentication();

------------------------------------------------------------------------------------------

The middleware sets the value of the HttpContext.User property to a ClaimsPrincipal object. 
Claims are pieces of information about a user and details of the source of that information, 
providing a generalpurpose approach to describing the information known about a user.

The ClaimsPrincipal class is part of .NET Core and isn’t directly useful in most ASP.NET Core
applications, but there are two nested properties that are useful in most applications:

ClaimsPrincipal.Identity.Name 
This property returns the username, which will be null if there is no user associated with the request.
ClaimsPrincipal.Identity.IsAuthenticated 
This property returns true if the user associated with the request has been authenticated.

-----------------------------------------------------------------------------------------

The /Account/Login and /Account/AccessDenied URLs are the defaults used by ASP.NET Core
authorization files. These can be changed in the Program.cs file using the options pattern, like this: 

builder.Services.Configure<CookieAuthenticationOptions>(
		IdentityConstants.ApplicationScheme,
	opts => {
		opts.LoginPath = "/Authenticate";
		opts.AccessDeniedPath = "/NotAllowed";
	});

Configuration is performed using the CookieAuthenticationOptions class, defined in the
Microsoft.AspNetCore.Authentication.Cookies namespace. 
The LoginPath property is used to specify the path to which browsers will be redirected 
when an unauthenticated user attempts to access a restricted endpoint. 
The AccessDeniedPath property is used to specify the path when an authenticated user 
attempts to access a restricted endpoint and does not have authorization.

-----------------------------------------------------------------------------------------